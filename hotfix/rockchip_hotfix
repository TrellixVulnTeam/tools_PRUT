#!/bin/bash
OK='\e[0;32m'
ERROR='\e[1;31m'
END='\e[0m'
ERROR()
{
    echo -e  "${ERROR} $1 ${END}"
}

OK()
{
    echo -e  "${OK} $1 ${END}"
}
# check if it's in rockchip project
if [ ! -e RKDocs ];then
    ERROR "Error path!!!"
    exit 1
fi

root=$PWD/
echo "CUR_PATH:"$root
root=$PWD/../
echo "root dir:"$root
cd system/vold/
branch=`git branch | awk '{if(match($1,"*")){print $2}}'`
if [ $# != 0 ];then
    RETSUT=`git branch | grep $1`
    if [ -z "$RETSUT" ];then
        ERROR "No found this branch!!!"
        exit
    fi
fi
cd - >/dev/null

if [ $# != 0 ];then
    SUBPROJECT=`repo list | awk -F":" '{print $1}'`
    DEST=$root/PATCH/Diff-\("$branch"\)_\("$1"\)
    mkdir -p $DEST
    for i in $SUBPROJECT
    do
        cd $i
        #if [ ! -z ${i##*/}  ];then
        #   i=${i%/*}/
        #fi
        subfiles=`git diff --name-only $1`
        echo "########################### in project $i ######################\n">>$DEST/log.txt
        git diff $1 >>$DEST/log.txt
        echo "\n#######################  END  ########################\n">>$DEST/log.txt

        for j in $subfiles
        do
            target=$i/$j

            target=${target#*/}
            dir=${target%/*}
            if [ -e  $j ];then
                mkdir -p $DEST/$dir
            fi

            if [ -f  $j ];then
                cp -rfp $j $DEST/$target
                echo "out------->$DEST/$target"
            elif [ -d  $j ];then
                echo "out------->$DEST/$target"
                target=${target%/*}
                target=${target%/*}
                cp  -rfp $j $DEST/$target
            else
                if [ -e $DEST/$target ];then
                    rm $DEST/$target
                    echo "delete------->$DEST/$target"
                fi
            fi
        done
        cd - >> /dev/null
    done
else
    echo "------->begin"
    echo "------->On branch $branch"
    echo "------> start get repo status"
    `repo status >repo.txt`
    echo "------> get repo status finised"
    project=`awk  '{if(match($1,"project")){print $2}}' repo.txt`
    if [ ! -z "$project" ];then
        TIME=`date +%Y%m%d%H%M`
        if [ ! -e $root/PATCH/$branch ];then
            STAGE_BRACH_FLD=$branch_$TIME
            mkdir -p $root/PATCH/$branch_$TIME
        fi
        DEST=Patch_"$TIME"
        mkdir -p $root/PATCH/$branch/$DEST
        echo "creat path:`$root/PATCH/$branch/$DEST`"
        mv repo.txt $root/PATCH/$branch/$DEST/repo_"$TIME".txt
        for i in $project
        do
            if [ ! -z ${i##*/}  ];then
                i=${i%/*}/
            fi
            cd $i
            subfiles=`git status -s | awk '{print $NF}'`
            subfiles_nountrack=`git status -s -uno | awk '{print $NF}'`
            echo "#################### in project $i #################\n">>$root/PATCH/$branch/$DEST/log_"$TIME".txt
            git diff >>$root/PATCH/$branch/$DEST/log_"$TIME".txt
            echo "\n##################  END  #########################\n">>$root/PATCH/$branch/$DEST/log_"$TIME".txt
            for j in $subfiles
            do
                target=$i$j
                target=${target#*/}
                dir=${target%/*}
                if [ -e  $j ];then
                    mkdir -p $root/PATCH/$branch/$DEST/current/$dir
                fi

                if [ -f  $j ];then
                    cp -rfp $j $root/PATCH/$branch/$DEST/current/$target
                    # echo "out------->PATCH/$branch/$DEST/current/$target"
                elif [ -d  $j ];then
                    # echo "out------->PATCH/$branch/$DEST/current/$target"
                    target=${target%/*}
                    target=${target%/*}
                    cp  -rfp $j $root/PATCH/$branch/$DEST/current/$target
                else
                    if [ -e $root/PATCH/$branch/$DEST/current/$target ];then
                        rm $root/PATCH/$branch/$DEST/current/$target
                        echo "delete -------> PATCH/$branch/$DEST/current/$target"
                    fi
                fi
            done
            git stash
            echo "--------------- ready to get changed file before status"
            for j in $subfiles_nountrack
            do
                target=$i$j
                target=${target#*/}
                dir=${target%/*}
                if [ -e  $j ];then
                    mkdir -p $root/PATCH/$branch/$DEST/before/$dir
                fi

                if [ -f  $j ];then
                    cp -rfp $j $root/PATCH/$branch/$DEST/before/$target
                    # echo "out------->PATCH/$branch/$DEST/before/$target"
                elif [ -d  $j ];then
                    # echo "out------->PATCH/$branch/$DEST/before/$target"
                    target=${target%/*}
                    target=${target%/*}
                    cp  -rfp $j $root/PATCH/$branch/$DEST/before/$target
                else
                    if [ -e $root/PATCH/$branch/$DEST/before/$target ];then
                        rm $root/PATCH/$branch/$DEST/before/$target
                        echo "delete -------> PATCH/$branch/$DEST/before/$target"
                    fi
                fi
            done
            git stash pop
            cd $root
        done
        echo "------->finish"
        # echo "auto commit?(y/n)"
        # read CMD
        # if [ "$CMD" = "y" ];then
        #     echo "Comment:"
        #     read CONTENT
        #     for i in $project
        #     do
        #         if [ ! -z ${i##*/}  ];then
        #             i=${i%/*}/
        #         fi
        #         cd $i
        #         echo "Project $i"
        #         git add --all
        #         git commit -am "$CONTENT"
        #         cd $root
        #     done
        # else
        #     exit 1
        # fi
    else
        echo "nothing to commit (working directory clean)"
    fi
fi
