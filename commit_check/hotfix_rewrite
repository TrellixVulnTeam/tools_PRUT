#!/bin/bash

BASH_VSERISON=1.0
echo "Bash Version: $BASH_VSERISON"

DEBUG_FLAG=true
MTK=false
SPREADTRUM=false
FOUND_FILE_CHANGE=false

CUR_DIR=$PWD
FORMAT_TEMPLATE_FLD=$(dirname ~/config/)
FORMAT_TEMPLATE_PATH=$FORMAT_TEMPLATE_FLD/config/commit_format_template.txt
FORMAT_CHECK_PY_FLILE=$FORMAT_TEMPLATE_FLD/config/format_check.py
echo "FORMAT_CHECK_PY_FLILE: $FORMAT_CHECK_PY_FLILE"

REPO_INFO_LOG=repo_infolog.log
REPO_BRANCH_LOG=repo_branch.log
LOG_INFO=log.log


function help()
{
	echo "------------------------------ HELP ------------------------------"
	echo "which place can use this bash script? "
	echo "MTK: use this script under alps dir "
	echo "SPREADTRUM: use this in main code dir"
	echo "Some help information need to added..."
	echo "------------------------------------------------------------------"
}

function error_echo()
{
	if [ $# -ne 1 ];then
		echo "not param transfred in error_echo"
	else
		echo -e "\e[1;31m ERROR: $1 \e[0m"
	fi
}

function pass_echo()
{
	if [ $# -ne 1 ];then
		echo "not param transfred in pass_echo"
	else
		echo -e "\e[0;32m PASS: $1 \e[0m"
	fi
}

function debug_msg()
{
	if [ true == "$DEBUG_FLAG" ]; then
		if [ $# -eq 1 ];then
			echo -ne "DEBUG: $1 \n"
		fi
	fi
}

function check_type_set_path_dir()
{
	if [  -d ".repo" ]; then
		if [ ! -d "alps" ]; then
			debug_msg "---> SPREADTRUM"
			SPREADTRUM=true
			CODE_HOME_DIR=$PWD
			cd ..
			PATCH_DIR=$PWD/PATCH
			cd -
			debug_msg "---> SPREADTRUM: CODE_HOME_DIR: $CODE_HOME_DIR"
			debug_msg "---> SPREADTRUM: PATCH_DIR: $PATCH_DIR"
		else
			error_echo "current dir, alps found"
		fi
	elif [  -d "../.repo" ]; then
		if [  -d "../alps" ]; then
			MTK=true
			CODE_HOME_DIR=$PWD
			cd ..
			MTK_ALPS_DIR=$PWD
			# patch_dir is alps patch_dir
			PATCH_DIR=$MTK_ALPS_DIR/PATCH
			debug_msg "---> MTK MTK_ALPS_DIR: $MTK_ALPS_DIR"
			debug_msg "---> MTK PATCH_DIR: $PATCH_DIR"
			debug_msg "---> MTK CODE_HOME_DIR: $CODE_HOME_DIR"
			cd $MTK_ALPS_DIR
		else
			error_echo "Dir, alps can not found"
			exit 1
		fi
	else
		error_echo "Dir, repo can not found"
		exit 1
	fi
}

function get_current_repo_branch_name()
{
	# choose dir kernel to find branch name
	cd  $CODE_HOME_DIR/system/vold
	BRANCH_NAME=`git symbolic-ref --short -q HEAD`
	if [ ! != "$BRANCH_NAME" ];then
		debug_msg "Current Branch: $BRANCH_NAME"
	else
		error_echo "No found this branch!!!"
		exit 1
	fi
	cd $CODE_HOME_DIR
}


function sprd_generate_patch()
{
	debug_msg "Get PATCH on Branch: $BRANCH_NAME"
	echo "repo status run"
	repo status > $PATCH_TARGET_DIR/$REPO_INFO_LOG

	PROJECT_NAME=$(awk '{if(match($1,"project")){print $2}}' $PATCH_TARGET_DIR/$REPO_INFO_LOG)
	echo $PROJECT_NAME > $PATCH_TARGET_DIR/$REPO_BRANCH_LOG
	debug_msg "PROJECT_NAME: $PROJECT_NAME"
	debug_msg "CODE_HOME_DIR: $CODE_HOME_DIR"

	CHANGED_BRANCH_NUMBER=`awk -F " " '{print NF}' $PATCH_TARGET_DIR/$REPO_BRANCH_LOG`
	debug_msg "CHANGED_BRANCH_NUMBER: $CHANGED_BRANCH_NUMBER"
	branch_index=1
	TEMP_LOG_FILE=$LOG_FLD/temp_log.log
	while [ $branch_index -le $CHANGED_BRANCH_NUMBER ]
	do
		debug_msg "branch_index: $branch_index"
		CURRENT_BRANCH_DIR=`awk -v loop_index=$branch_index -F " " '{print $loop_index}' $PATCH_TARGET_DIR/$REPO_BRANCH_LOG`
		debug_msg "CURRENT_BRANCH_DIR: $CURRENT_BRANCH_DIR"
		mkdir -p $PATCH_TARGET_DIR/current/$CURRENT_BRANCH_DIR
		mkdir -p $PATCH_TARGET_DIR/before/$CURRENT_BRANCH_DIR
		cd $CURRENT_BRANCH_DIR
		debug_msg "O PWD: $PWD"

		all_change_list=$(git status -s | awk '{print $NF}')
		change_ignore_new_add=$(git status -s -uno | awk '{print $NF}')
		
		for modified_file in $all_change_list
		do
			cp -rf --parents $modified_file $PATCH_TARGET_DIR/current/$CURRENT_BRANCH_DIR
			FOUND_FILE_CHANGE=true
		done
		debug_msg "---> run git stash"
		git stash
		for modified_file in $change_ignore_new_add
		do
			cp -rf --parents $modified_file $PATCH_TARGET_DIR/before/$CURRENT_BRANCH_DIR
		done
		debug_msg "---> git stash pop"
		git stash pop
		cd $CODE_HOME_DIR

		let branch_index++
	done
	echo "---> patch finish"
}


function mtk_generate_patch()
{
	debug_msg "Get PATCH on Branch: $BRANCH_NAME"
	echo "repo status run"
	repo status > $PATCH_TARGET_DIR/$REPO_INFO_LOG

	PROJECT_NAME=$(awk '{if(match($1,"project")){print $2}}' $PATCH_TARGET_DIR/$REPO_INFO_LOG)
	echo $PROJECT_NAME > $PATCH_TARGET_DIR/$REPO_BRANCH_LOG
	debug_msg "PROJECT_NAME: $PROJECT_NAME"
	debug_msg "CODE_HOME_DIR: $CODE_HOME_DIR"

	CHANGED_BRANCH_NUMBER=`awk -F " " '{print NF}' $PATCH_TARGET_DIR/$REPO_BRANCH_LOG`
	debug_msg "CHANGED_BRANCH_NUMBER: $CHANGED_BRANCH_NUMBER"
	branch_index=1
	TEMP_LOG_FILE=$LOG_FLD/temp_log.log
	while [ $branch_index -le $CHANGED_BRANCH_NUMBER ]
	do
		# debug_msg "branch_index: $branch_index"
		CURRENT_BRANCH_DIR=`awk -v loop_index=$branch_index -F " " '{print $loop_index}' $PATCH_TARGET_DIR/$REPO_BRANCH_LOG`
		# debug_msg "CURRENT_BRANCH_DIR: $CURRENT_BRANCH_DIR"
		mkdir -p $PATCH_TARGET_DIR/current/$CURRENT_BRANCH_DIR
		mkdir -p $PATCH_TARGET_DIR/before/$CURRENT_BRANCH_DIR
		cd $CURRENT_BRANCH_DIR
		# debug_msg "O PWD: $PWD"

		all_change_list=$(git status -s | awk '{print $NF}')
		change_ignore_new_add=$(git status -s -uno | awk '{print $NF}')
		
		for modified_file in $all_change_list
		do
			cp -rf --parents $modified_file $PATCH_TARGET_DIR/current/$CURRENT_BRANCH_DIR
			FOUND_FILE_CHANGE=true
		done
		debug_msg "---> run git stash"
		git stash
		for modified_file in $change_ignore_new_add
		do
			cp -rf --parents $modified_file $PATCH_TARGET_DIR/before/$CURRENT_BRANCH_DIR
		done
		debug_msg "---> git stash pop"
		git stash pop
		cd $MTK_ALPS_DIR

		let branch_index++
	done
	echo "---> patch finish"
}

debug_msg $FORMAT_TEMPLATE_PATH
debug_msg "CUR_DIR: $CUR_DIR"
# find repo set home dir
check_type_set_path_dir
get_current_repo_branch_name
TIME=$(date +%Y%m%d%H%M)
PATCH_NAME=Patch_"$TIME"
PATCH_TARGET_DIR=$PATCH_DIR/$BRANCH_NAME/$PATCH_NAME
if [ ! -d "$PATCH_TARGET_DIR" ]; then
	mkdir -p $PATCH_TARGET_DIR
else
	debug_msg "exsit: $PATCH_TARGET_DIR"
	rm -rvf $PATCH_TARGET_DIR
	mkdir -p $PATCH_TARGET_DIR
fi

touch $PATCH_TARGET_DIR/$REPO_INFO_LOG
touch $PATCH_TARGET_DIR/$REPO_BRANCH_LOG
touch $PATCH_TARGET_DIR/$LOG_INFO


if [ true == "$SPREADTRUM" ]; then
	cd $CODE_HOME_DIR
	debug_msg "---> moved in: CODE_HOME_DIR: $CODE_HOME_DIR"
	echo "Spreadtrum Platform begin"
	sprd_generate_patch
elif [ true == "$MTK" ]; then
	echo "MTK Platform begin"
	cd $MTK_ALPS_DIR
	debug_msg "---> moved in: MTK_ALPS_DIR: $MTK_ALPS_DIR"
	mtk_generate_patch
else
	error_echo "cannot found correct platform"
fi

if [ true == "$FOUND_FILE_CHANGE" ]; then
	echo -ne "auto commit(y/n)? : "
	read input
	if [ "$input" = "y" ]; then
		echo "---> ready to check format"
		# write format_check.py path
		python3 $FORMAT_CHECK_PY_FLILE check $FORMAT_TEMPLATE_PATH

		branch_index=1
		while [ $branch_index -le $CHANGED_BRANCH_NUMBER ]
		do
			# debug_msg "branch_index: $branch_index"
			CURRENT_BRANCH_DIR=`awk -v loop_index=$branch_index -F " " '{print $loop_index}' $PATCH_TARGET_DIR/$REPO_BRANCH_LOG`
			cd $CURRENT_BRANCH_DIR
			echo "In branch: $PWD"
			git add --all
			python3 $FORMAT_CHECK_PY_FLILE commit $FORMAT_TEMPLATE_PATH $PATCH_TARGET_DIR/$REPO_INFO_LOG
			if [ true == "$SPREADTRUM" ]; then
				cd $CODE_HOME_DIR
			elif [ true == "$MTK" ]; then
				cd $MTK_ALPS_DIR
			fi
			let branch_index++
		done
	fi
else
	echo "nothing to commit (working directory clean)"
fi

rm -f $PATCH_TARGET_DIR/$REPO_INFO_LOG
rm -f $PATCH_TARGET_DIR/$REPO_BRANCH_LOG
rm -f $PATCH_TARGET_DIR/$LOG_INFO
